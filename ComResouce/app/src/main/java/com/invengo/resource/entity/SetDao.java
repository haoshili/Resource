package com.invengo.resource.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.invengo.resource.entity.Set;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SET.
*/
public class SetDao extends AbstractDao<Set, Long> {

    public static final String TABLENAME = "SET";

    /**
     * Properties of entity Set.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Set_name = new Property(1, String.class, "set_name", false, "SET_NAME");
        public final static Property Set_image_name = new Property(2, String.class, "set_image_name", false, "SET_IMAGE_NAME");
        public final static Property Set_sys_show = new Property(3, Boolean.class, "set_sys_show", false, "SET_SYS_SHOW");
        public final static Property Set_set_show = new Property(4, Boolean.class, "set_set_show", false, "SET_SET_SHOW");
    };


    public SetDao(DaoConfig config) {
        super(config);
    }
    
    public SetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SET' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SET_NAME' TEXT," + // 1: set_name
                "'SET_IMAGE_NAME' TEXT," + // 2: set_image_name
                "'SET_SYS_SHOW' INTEGER," + // 3: set_sys_show
                "'SET_SET_SHOW' INTEGER);"); // 4: set_set_show
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SET'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Set entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String set_name = entity.getSet_name();
        if (set_name != null) {
            stmt.bindString(2, set_name);
        }
 
        String set_image_name = entity.getSet_image_name();
        if (set_image_name != null) {
            stmt.bindString(3, set_image_name);
        }
 
        Boolean set_sys_show = entity.getSet_sys_show();
        if (set_sys_show != null) {
            stmt.bindLong(4, set_sys_show ? 1l: 0l);
        }
 
        Boolean set_set_show = entity.getSet_set_show();
        if (set_set_show != null) {
            stmt.bindLong(5, set_set_show ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Set readEntity(Cursor cursor, int offset) {
        Set entity = new Set( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // set_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // set_image_name
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // set_sys_show
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // set_set_show
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Set entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSet_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSet_image_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSet_sys_show(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setSet_set_show(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Set entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Set entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
