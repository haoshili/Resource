package com.invengo.resource.entity;

import com.invengo.resource.entity.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TID_DATA.
 */
public class TidData {

    private String id;
    private String tid_tid;
    private Boolean tid_has_read;
    private String product_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TidDataDao myDao;

    private Product product;
    private String product__resolvedKey;


    public TidData() {
    }

    public TidData(String id) {
        this.id = id;
    }

    public TidData(String id, String tid_tid, Boolean tid_has_read, String product_id) {
        this.id = id;
        this.tid_tid = tid_tid;
        this.tid_has_read = tid_has_read;
        this.product_id = product_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTidDataDao() : null;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getTid_tid() {
        return tid_tid;
    }

    public void setTid_tid(String tid_tid) {
        this.tid_tid = tid_tid;
    }

    public Boolean getTid_has_read() {
        return tid_has_read;
    }

    public void setTid_has_read(Boolean tid_has_read) {
        this.tid_has_read = tid_has_read;
    }

    public String getProduct_id() {
        return product_id;
    }

    public void setProduct_id(String product_id) {
        this.product_id = product_id;
    }

    /** To-one relationship, resolved on first access. */
    public Product getProduct() {
        String __key = this.product_id;
        if (product__resolvedKey == null || product__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            Product productNew = targetDao.load(__key);
            synchronized (this) {
                product = productNew;
            	product__resolvedKey = __key;
            }
        }
        return product;
    }

    public void setProduct(Product product) {
        synchronized (this) {
            this.product = product;
            product_id = product == null ? null : product.getId();
            product__resolvedKey = product_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
