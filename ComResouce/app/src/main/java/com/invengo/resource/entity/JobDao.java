package com.invengo.resource.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.invengo.resource.entity.Job;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table JOB.
*/
public class JobDao extends AbstractDao<Job, String> {

    public static final String TABLENAME = "JOB";

    /**
     * Properties of entity Job.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Job_name = new Property(1, String.class, "job_name", false, "JOB_NAME");
        public final static Property Text = new Property(2, Boolean.class, "text", false, "TEXT");
        public final static Property Job_ctime = new Property(3, Long.class, "job_ctime", false, "JOB_CTIME");
        public final static Property Job_complete = new Property(4, Boolean.class, "job_complete", false, "JOB_COMPLETE");
    };

    private DaoSession daoSession;


    public JobDao(DaoConfig config) {
        super(config);
    }
    
    public JobDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'JOB' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'JOB_NAME' TEXT," + // 1: job_name
                "'TEXT' INTEGER," + // 2: text
                "'JOB_CTIME' INTEGER," + // 3: job_ctime
                "'JOB_COMPLETE' INTEGER);"); // 4: job_complete
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JOB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Job entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String job_name = entity.getJob_name();
        if (job_name != null) {
            stmt.bindString(2, job_name);
        }
 
        Boolean text = entity.getText();
        if (text != null) {
            stmt.bindLong(3, text ? 1l: 0l);
        }
 
        Long job_ctime = entity.getJob_ctime();
        if (job_ctime != null) {
            stmt.bindLong(4, job_ctime);
        }
 
        Boolean job_complete = entity.getJob_complete();
        if (job_complete != null) {
            stmt.bindLong(5, job_complete ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(Job entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Job readEntity(Cursor cursor, int offset) {
        Job entity = new Job( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // job_name
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // text
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // job_ctime
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // job_complete
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Job entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setJob_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setJob_ctime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setJob_complete(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Job entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Job entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
