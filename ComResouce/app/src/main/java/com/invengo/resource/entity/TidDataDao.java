package com.invengo.resource.entity;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.invengo.resource.entity.TidData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TID_DATA.
*/
public class TidDataDao extends AbstractDao<TidData, String> {

    public static final String TABLENAME = "TID_DATA";

    /**
     * Properties of entity TidData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Tid_tid = new Property(1, String.class, "tid_tid", false, "TID_TID");
        public final static Property Tid_product_name = new Property(2, String.class, "tid_product_name", false, "TID_PRODUCT_NAME");
        public final static Property Tid_has_read = new Property(3, Boolean.class, "tid_has_read", false, "TID_HAS_READ");
        public final static Property Product_id = new Property(4, String.class, "product_id", false, "PRODUCT_ID");
    };

    private DaoSession daoSession;

    private Query<TidData> product_TidDatasQuery;

    public TidDataDao(DaoConfig config) {
        super(config);
    }
    
    public TidDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TID_DATA' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'TID_TID' TEXT," + // 1: tid_tid
                "'TID_PRODUCT_NAME' TEXT," + // 2: tid_product_name
                "'TID_HAS_READ' INTEGER," + // 3: tid_has_read
                "'PRODUCT_ID' TEXT);"); // 4: product_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TID_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TidData entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String tid_tid = entity.getTid_tid();
        if (tid_tid != null) {
            stmt.bindString(2, tid_tid);
        }
 
        String tid_product_name = entity.getTid_product_name();
        if (tid_product_name != null) {
            stmt.bindString(3, tid_product_name);
        }
 
        Boolean tid_has_read = entity.getTid_has_read();
        if (tid_has_read != null) {
            stmt.bindLong(4, tid_has_read ? 1l: 0l);
        }
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(5, product_id);
        }
    }

    @Override
    protected void attachEntity(TidData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TidData readEntity(Cursor cursor, int offset) {
        TidData entity = new TidData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tid_tid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tid_product_name
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // tid_has_read
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // product_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TidData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTid_tid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTid_product_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTid_has_read(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setProduct_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TidData entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TidData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tidDatas" to-many relationship of Product. */
    public List<TidData> _queryProduct_TidDatas(String product_id) {
        synchronized (this) {
            if (product_TidDatasQuery == null) {
                QueryBuilder<TidData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Product_id.eq(null));
                product_TidDatasQuery = queryBuilder.build();
            }
        }
        Query<TidData> query = product_TidDatasQuery.forCurrentThread();
        query.setParameter(0, product_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProductDao().getAllColumns());
            builder.append(" FROM TID_DATA T");
            builder.append(" LEFT JOIN PRODUCT T0 ON T.'PRODUCT_ID'=T0.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TidData loadCurrentDeep(Cursor cursor, boolean lock) {
        TidData entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
        entity.setProduct(product);

        return entity;    
    }

    public TidData loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TidData> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TidData> list = new ArrayList<TidData>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TidData> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TidData> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
