package com.invengo.resource.entity;

import java.util.List;
import com.invengo.resource.entity.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PRODUCT.
 */
public class Product {

    private String product_name;
    private String id;
    private String product_type;
    private String product_des;
    private Boolean product_storage;
    private Boolean product_upload;
    private String job_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductDao myDao;

    private Job job;
    private String job__resolvedKey;

    private List<TidData> tidDatas;

    public Product() {
    }

    public Product(String id) {
        this.id = id;
    }

    public Product(String product_name, String id, String product_type, String product_des, Boolean product_storage, Boolean product_upload, String job_id) {
        this.product_name = product_name;
        this.id = id;
        this.product_type = product_type;
        this.product_des = product_des;
        this.product_storage = product_storage;
        this.product_upload = product_upload;
        this.job_id = job_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductDao() : null;
    }

    public String getProduct_name() {
        return product_name;
    }

    public void setProduct_name(String product_name) {
        this.product_name = product_name;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getProduct_type() {
        return product_type;
    }

    public void setProduct_type(String product_type) {
        this.product_type = product_type;
    }

    public String getProduct_des() {
        return product_des;
    }

    public void setProduct_des(String product_des) {
        this.product_des = product_des;
    }

    public Boolean getProduct_storage() {
        return product_storage;
    }

    public void setProduct_storage(Boolean product_storage) {
        this.product_storage = product_storage;
    }

    public Boolean getProduct_upload() {
        return product_upload;
    }

    public void setProduct_upload(Boolean product_upload) {
        this.product_upload = product_upload;
    }

    public String getJob_id() {
        return job_id;
    }

    public void setJob_id(String job_id) {
        this.job_id = job_id;
    }

    /** To-one relationship, resolved on first access. */
    public Job getJob() {
        String __key = this.job_id;
        if (job__resolvedKey == null || job__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            JobDao targetDao = daoSession.getJobDao();
            Job jobNew = targetDao.load(__key);
            synchronized (this) {
                job = jobNew;
            	job__resolvedKey = __key;
            }
        }
        return job;
    }

    public void setJob(Job job) {
        synchronized (this) {
            this.job = job;
            job_id = job == null ? null : job.getId();
            job__resolvedKey = job_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TidData> getTidDatas() {
        if (tidDatas == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TidDataDao targetDao = daoSession.getTidDataDao();
            List<TidData> tidDatasNew = targetDao._queryProduct_TidDatas(id);
            synchronized (this) {
                if(tidDatas == null) {
                    tidDatas = tidDatasNew;
                }
            }
        }
        return tidDatas;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTidDatas() {
        tidDatas = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
