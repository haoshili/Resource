package com.invengo.resource.entity;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.invengo.resource.entity.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT.
*/
public class ProductDao extends AbstractDao<Product, String> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Product_name = new Property(0, String.class, "product_name", false, "PRODUCT_NAME");
        public final static Property Id = new Property(1, String.class, "id", true, "ID");
        public final static Property Product_type = new Property(2, String.class, "product_type", false, "PRODUCT_TYPE");
        public final static Property Product_des = new Property(3, String.class, "product_des", false, "PRODUCT_DES");
        public final static Property Product_storage = new Property(4, Boolean.class, "product_storage", false, "PRODUCT_STORAGE");
        public final static Property Product_upload = new Property(5, Boolean.class, "product_upload", false, "PRODUCT_UPLOAD");
        public final static Property Job_id = new Property(6, String.class, "job_id", false, "JOB_ID");
    };

    private DaoSession daoSession;

    private Query<Product> job_ProductsQuery;

    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT' (" + //
                "'PRODUCT_NAME' TEXT," + // 0: product_name
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 1: id
                "'PRODUCT_TYPE' TEXT," + // 2: product_type
                "'PRODUCT_DES' TEXT," + // 3: product_des
                "'PRODUCT_STORAGE' INTEGER," + // 4: product_storage
                "'PRODUCT_UPLOAD' INTEGER," + // 5: product_upload
                "'JOB_ID' TEXT);"); // 6: job_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(1, product_name);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String product_type = entity.getProduct_type();
        if (product_type != null) {
            stmt.bindString(3, product_type);
        }
 
        String product_des = entity.getProduct_des();
        if (product_des != null) {
            stmt.bindString(4, product_des);
        }
 
        Boolean product_storage = entity.getProduct_storage();
        if (product_storage != null) {
            stmt.bindLong(5, product_storage ? 1l: 0l);
        }
 
        Boolean product_upload = entity.getProduct_upload();
        if (product_upload != null) {
            stmt.bindLong(6, product_upload ? 1l: 0l);
        }
 
        String job_id = entity.getJob_id();
        if (job_id != null) {
            stmt.bindString(7, job_id);
        }
    }

    @Override
    protected void attachEntity(Product entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // product_name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // product_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // product_des
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // product_storage
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // product_upload
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // job_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setProduct_name(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProduct_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProduct_des(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProduct_storage(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setProduct_upload(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setJob_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Product entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "products" to-many relationship of Job. */
    public List<Product> _queryJob_Products(String job_id) {
        synchronized (this) {
            if (job_ProductsQuery == null) {
                QueryBuilder<Product> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Job_id.eq(null));
                job_ProductsQuery = queryBuilder.build();
            }
        }
        Query<Product> query = job_ProductsQuery.forCurrentThread();
        query.setParameter(0, job_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getJobDao().getAllColumns());
            builder.append(" FROM PRODUCT T");
            builder.append(" LEFT JOIN JOB T0 ON T.'JOB_ID'=T0.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Product loadCurrentDeep(Cursor cursor, boolean lock) {
        Product entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Job job = loadCurrentOther(daoSession.getJobDao(), cursor, offset);
        entity.setJob(job);

        return entity;    
    }

    public Product loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Product> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Product> list = new ArrayList<Product>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Product> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Product> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
